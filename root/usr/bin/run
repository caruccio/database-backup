#!/bin/bash

TIMESTAMP=$(date +%Y-%m-%d-%H%M%S)

is_database()
{
    oc rsh -n $1 $2 <${CONTAINER_SCRIPTS_PATH}/check-database &>/dev/null
}

send_to_azure()
{
   [ -n "${AZURE_ACCOUNT_KEY}" ] && \
   [ -n "${AZURE_ACCOUNT_NAME}" ] && \
   [ -n "${AZURE_CONTAINER}" ]
}


send_to_aws()
{
   [ -n "${AWS_ACCESS_KEY_ID}" ] && \
   [ -n "${AWS_SECRET_ACCESS_KEY}" ] && \
   [ -n "${AWS_S3_BUCKET_NAME}" ] && \
   [ -n "${AWS_REGION}" ]
}


azure_upload()
{
    echo "--> Uploading to Azure Blob Storage: ${AZURE_CONTAINER}/$1"
    ${CONTAINER_SCRIPTS_PATH}/upload-azure "${1}"
}


aws_upload()
{
    echo "--> Uploading to AWS S3: s3://$AWS_S3_BUCKET_NAME/$1"
    ${CONTAINER_SCRIPTS_PATH}/upload-aws "${1}"
}


upload()
{
    local prefix=${1//\//-}
    local extension=${2:-}
    local remote_path="${NAMESPACE}/${NAMESPACE_UID}/${prefix}-${TIMESTAMP}${extension}"

    if send_to_azure; then
        azure_upload "${remote_path}"
    elif send_to_aws; then
        aws_upload "${remote_path}"
    fi
}

send_to_azure && is_azure=1 || is_azure=0
send_to_aws && is_aws=1 || is_aws=0

if [ $(( $is_azure | $is_aws )) -eq 0 ]; then
    cat <<-EOF
	ERROR: Please select one storage method by settings according env vars:
	ERROR:
	ERROR:  - Azure Blob Storage
	ERROR:      AZURE_ACCOUNT_NAME
	ERROR:      AZURE_ACCOUNT_KEY
	ERROR:      AZURE_CONTAINER
	ERROR:
	ERROR:  - AWS S3
	ERROR:      AWS_ACCESS_KEY_ID
	ERROR:      AWS_SECRET_ACCESS_KEY
	ERROR:      AWS_S3_BUCKET_NAME
	ERROR:      AWS_REGION or AWS_DEFAULT_REGION (optional)
	EOF
    missconfig=1
fi

if [ -z "${NAMESPACE}" ]; then
    echo "ERROR: Missing env var NAMESPACE"
    missconfig=1
fi

[ "${missconfig}" == 1 ] && exit 1
[ "${DEBUG}" == 1 ] && set -x
unset DEBUG

# set up configuration for openshift client
MASTER_URL=${MASTER_URL:-https://kubernetes.default.svc.cluster.local:443}
MASTER_CA=${MASTER_CA:-/var/run/secrets/kubernetes.io/serviceaccount/ca.crt}
TOKEN_FILE=${TOKEN_FILE:-/var/run/secrets/kubernetes.io/serviceaccount/token}

{
# craft a kubeconfig, usually at $KUBECONFIG location
oc config set-cluster master \
    --certificate-authority="${MASTER_CA}" \
    --server="${MASTER_URL}"

oc config set-credentials account \
    --token="$(<${TOKEN_FILE})"

oc config set-context current \
    --cluster=master \
    --user=account \
    --namespace="${NAMESPACE}"

oc config use-context current
} >/dev/null

NAMESPACE_UID=`oc get namespaces/$NAMESPACE -o jsonpath --template='{.metadata.uid}'`

resources=()

dcs=$(oc get deploymentconfigs -o jsonpath \
    --template='{.items[*].metadata.name}' \
    -n ${NAMESPACE} \
    ${LABEL_SELECTOR:+-l ${LABEL_SELECTOR}}
)

for dc in ${dcs}; do
    i=${#resources[*]}
    resources[$i]=deploymentconfig/$dc
done

statefulsets=$(oc get statefulsets -o jsonpath \
    --template='{.items[*].metadata.name}' \
    -n ${NAMESPACE} \
    ${LABEL_SELECTOR:+-l ${LABEL_SELECTOR}}
)

for ps in ${statefulsets}; do
    i=${#resources[*]}
    resources[$i]=pod/${ps}-0
done

petsets=$(oc get petset -o jsonpath \
    --template='{.items[*].metadata.name}' \
    -n ${NAMESPACE} \
    ${LABEL_SELECTOR:+-l ${LABEL_SELECTOR}}
)

for ps in ${petsets}; do
    i=${#resources[*]}
    resources[$i]=pod/${ps}-0
done

if [ ${#resources[*]} -lt 1 ]; then
    echo "--> No suitable applications to dump from '${NAMESPACE}'. Giving up..."
    exit 0
fi

echo "--> Found resouces: ${resources[*]}"

for res in ${resources[*]}; do
    if ! is_database ${NAMESPACE} ${res}; then
        echo "--> Not a database: $NAMESPACE/${res}. Skipping..."
        continue
    fi

    echo "--> Dumping from $NAMESPACE/${res}"

    oc rsh -n ${NAMESPACE} ${res} <${CONTAINER_SCRIPTS_PATH}/dump-database | gzip -c - | pv --interval 5 --format '%b %t %r' | upload ${res} .gz
    ret=$?

    if [ $ret -eq 1 ]; then
        echo "ERROR: Fail generating backup: $res"
    elif [ $ret -eq 2 ]; then
        echo "ERROR: Fail uploading backup: $res"
    fi
done
